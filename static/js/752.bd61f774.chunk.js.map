{"version":3,"file":"static/js/752.bd61f774.chunk.js","mappings":"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","sources":["components/ContactForm/ContacForm.styled.js","components/ContactForm/ContactForm.js","redux/contacts/selectors.js","components/ContactList/ContactList.styled.js","components/Error/Error.styled.js","components/Error/Error.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Loader/Loader.styled.js","components/Loader/Loader.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\nbackground-color: transparent;\nmax-width: 320px;\n  margin: auto;\n  padding: 20px;  \n  border-radius: 10px;\n  box-shadow:\n       inset 0 -3em 3em rgba(0,0,128,0.3),\n             0 0  0 2px rgb(255,255,255),\n             0.3em 0.3em 1em rgba(0,0,0,0.3);\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n`;\n\nexport const StyledLabel = styled.label`\nposition: relative;\ndisplay:grid;\ngap:10px;\n/* color:gainsboro; */\ncolor: navy;\n`;\n\nexport const StyledField = styled(Field)`\nborder-radius: 5px;\npadding: 5px 10px;\nmax-width: 100%;\n\n&:hover{\n    border: 2px solid darkblue;\n}\n\n&:focus{\n    border: 2px solid darkblue;\n    outline: none;\n    color: darkblue;\n}\n`;\n\nexport const Button = styled.button`\nmargin-right: auto;\nborder-radius: 5px;\npadding: 4px  8px;\n\n&:hover{\n    background-color: darkblue;\n    color: white;\n}\n&:focus{\n    background-color: darkblue;\n    color: white;\n}\n`;\n\nexport const StyledError = styled(ErrorMessage)`\ncolor: red;\nposition: absolute;\ntop: 50%;\nright: 5%;\n`;\n\nexport const TitleContactForm = styled.h2`\ntext-align: center;\ntext-transform: uppercase;\n/* color: white; */\ncolor: navy;\n`;","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from 'redux/contacts/operations';\nimport { Button, StyledField, StyledForm, StyledLabel, StyledError , TitleContactForm} from './ContacForm.styled';\n\nconst SignupSchema = Yup.object().shape({\n   name: Yup.string()\n     .min(2, 'Too Short!')\n     .max(20, 'Too Long!')\n     .trim()\n     .required('Required'),\n   number: Yup.string()\n     .min(2, 'Too Short!')\n     .max(20, 'Too Long!')\n     .required('Required'),\n });\n\nconst ContactForm = () => {\n\n  const dispatch = useDispatch(); \n  \n  return (\n    <>\n    <TitleContactForm>Add your contacts</TitleContactForm>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n            }}\n            validationSchema={SignupSchema}\n            onSubmit={(values, actions) => {            \n            dispatch(addContact({...values}));\n            actions.resetForm();          \n          }}\n      >\n        \n      <StyledForm>\n        <StyledLabel>Name\n        <StyledField type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required />\n       <StyledError name=\"name\" component=\"div\"/>\n        </StyledLabel>\n\n        <StyledLabel>Phone\n        <StyledField\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required/>\n        <StyledError name=\"number\" component=\"div\"/>\n        </StyledLabel>\n                  \n        <Button type=\"submit\">Add contact</Button>\n      </StyledForm>\n      </Formik>      \n    </>\n    )\n}\n\nexport default ContactForm\n\n\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectError = state => state.contacts.contacts.error;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n    \n        const visibleContacts = contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n        return visibleContacts;\n    });","import styled from 'styled-components';\nimport { GrClose } from \"react-icons/gr\";\n\nexport const List = styled.ul`\ndisplay: flex;\nflex-direction: column;\ngap: 5px;\npadding-left: 20px;\nlist-style: square;\ncolor: navy;\nwidth: 500px;\nmargin: auto;\n`;\n\nexport const WrapItem = styled.div`\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\ngap:20px;\n\n`;\n\nexport const Text = styled.p`\nmargin: 0;\npadding: 5px;\ntext-transform: capitalize;\nfont-size: 18px;\ncolor: navy;\n`;\n\nexport const Btn = styled.button`\npadding: 4px  8px;\ndisplay: flex; \nborder: none;\nborder-radius: 4px;\nbackground-color: transparent;\ncursor: pointer;\npadding: 2px;\n\n &:hover{\n  background-color: gainsboro;   \n}\n`; \n\nexport const WrappText = styled.div`\ndisplay: contents;\n\n:last-child{\n  margin-left: auto;\n}\n`;\n\nexport const IconClose = styled(GrClose)`\n path{\n  stroke: red; \n }  \n`;\n\nexport const TotalText = styled.p`\ntext-align: center;\ncolor: navy;\n`;\n\nexport const TitleList = styled.h2`\ncolor: navy;\ntext-align: center;\n`; \n\nexport const Form = styled.form`\ndisplay: flex;\ngap: 15px;\n`;\n\nexport const FormLabel = styled.label`\n\n`;\n\nexport const FormInput = styled.input`\nwidth: 190px;\n\nbackground-color: transparent;\nborder-radius: 5px;\nborder: 1px solid navy;\npadding: 4px 10px;\n`;\n\nexport const ChangeBtn = styled.button`\nmargin-right: auto;\nborder-radius: 5px;\npadding: 4px  8px;\n\n&:hover{\n    background-color: darkblue;\n    color: white;\n}\n&:focus{\n    background-color: darkblue;\n    color: white;\n}\n`;","import styled from 'styled-components';\n\nexport const ErrorTitle = styled.h2`\ncolor:gainsboro;\ntext-align: center;\n`;","import { ErrorTitle } from \"./Error.styled\";\n\n const Error = () => {\n    return <ErrorTitle>Sorry, something went wrong, please reload the page.</ErrorTitle>\n};\n\nexport default Error;","import { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContact, updateContact } from \"redux/contacts/operations\";\nimport { selectError, selectVisibleContacts } from \"redux/contacts/selectors\";\nimport { Btn, List, WrapItem, Text, WrappText, IconClose, TitleList, TotalText, FormInput, Form, ChangeBtn } from \"./ContactList.styled\"\nimport { MdDriveFileRenameOutline } from \"react-icons/md\";\nimport Error from '../Error';\nimport { useState } from \"react\";\nimport { FormLabel } from \"@mui/material\";\n\nconst ContactList = () => {\n  const dispatch = useDispatch();  \n  const [changes, setChanges] = useState(null);  \n\n  const contacts = useSelector(selectVisibleContacts);  \n  const error = useSelector(selectError);\n  \n\n  const handleChanges = (e, id) => {\n    e.preventDefault();\n    setChanges(null);     \n    dispatch(updateContact({\n      contactId: id,\n      name: e.currentTarget.elements.name.value,\n      number: e.currentTarget.elements.number.value\n    }));   \n  }; \n  \n  return (\n    <>      \n      {error ? <Error /> : null}\n      {(contacts.length !== 0)\n        ? (<>\n          <TotalText>Total contacts: {contacts.length}</TotalText>\n          <List>\n            {contacts.map(({ id, name, number }) => (\n              <li key={id}>\n                <WrapItem>\n                  {changes !== id ? (\n                    <>\n                      <WrappText>\n                        <Text>{name}</Text>\n                        <Text> {number}</Text>\n                      </WrappText>\n                      <Btn onClick={() => setChanges(id)}>\n                        <MdDriveFileRenameOutline />\n                      </Btn>\n                      <Btn onClick={() => dispatch(deleteContact(id))}>\n                        <IconClose />\n                      </Btn> </>)\n                    : (\n                      <Form key={id} onSubmit={(e) => handleChanges(e, id)} >\n                      <FormLabel>\n                        <FormInput\n                          type=\"name\"\n                          name=\"name\"\n                          defaultValue={name}\n                        />\n                      </FormLabel>\n                      <label>\n                        <FormInput\n                          type=\"text\"\n                          name=\"number\"\n                          defaultValue={number}\n                        />\n                      </label>\n                      <ChangeBtn type=\"submit\">Change</ChangeBtn>\n                    </Form>)            \n                  }\n                </WrapItem>\n              </li>\n            ))}\n          </List>\n        </>)\n        : (error ? null : <TitleList>Sorry, you have no saved contacts.</TitleList>)\n      }\n    </>\n  );\n};\n\nexport default ContactList;\n\n","import styled from 'styled-components'\n\nexport const FilterWrapper = styled.div`\ntext-align: center;\n`;\n\nexport const InputFilter = styled.input`\nborder-radius: 5px;\npadding: 4px 10px;\ntext-align: center;\n&:hover{\n    border: 2px solid darkblue;\n}\n\n&:focus{\n    border: 2px solid darkblue;\n    outline: none;\n    color: darkblue;\n}\n`;\n\nexport const TextFilter = styled.p`\nfont-weight: 600;\ntext-transform: uppercase;\n/* color:gainsboro; */\ncolor: navy;\n`;\n\nexport const TitleFilter = styled.h2`\ntext-transform: uppercase;\n/* color: white; */\ncolor: navy;\n`;","import { useDispatch } from \"react-redux\";\nimport { setContactFilter } from \"redux/contacts/contactSlice\";\nimport { FilterWrapper, InputFilter, TextFilter, TitleFilter } from \"./Filter.styled\";\n\nconst Filter = () => { \n  const dispatch = useDispatch();\n  \n  return (\n    <FilterWrapper> \n    <TitleFilter>Contacts</TitleFilter>  \n      <TextFilter>Find contacts by name</TextFilter>\n      <InputFilter\n        type=\"text\"        \n        onChange={(evt)=>dispatch(setContactFilter(evt.target.value))} \n      />\n    </FilterWrapper>\n  );\n};\n\nexport default Filter","import styled from 'styled-components';\n\nexport const WrapperLoader = styled.div`\nmargin-top: 40px;\ntext-align: center;\n`;","import { RotatingLines } from 'react-loader-spinner'\nimport { WrapperLoader } from './Loader.styled';\n\nconst Loader = () => {\n    return (\n    <WrapperLoader>\n    <RotatingLines\n      strokeColor=\"grey\"\n      strokeWidth=\"5\"\n      animationDuration=\"0.75\"\n      width=\"96\"\n      visible={true}/>\n    </WrapperLoader>\n    )\n}\n\nexport default Loader; ","import { Container } from \"@mui/material\";\nimport ContactForm from \"components/ContactForm\";\nimport ContactList from \"components/ContactList\";\nimport Filter from \"components/Filter\";\nimport Loader from \"components/Loader\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectError, selectIsLoading } from \"redux/contacts/selectors\";\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    const error = useSelector(selectError);\n  const loading = useSelector(selectIsLoading);\n\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <Container>            \n            <ContactForm />\n            <Filter />\n            {loading && !error ? <Loader/> : <ContactList/>}            \n     </Container>\n    )\n};\n\nexport default Contacts;"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","StyledLabel","_templateObject2","StyledField","Field","_templateObject3","Button","_templateObject4","StyledError","ErrorMessage","_templateObject5","TitleContactForm","_templateObject6","SignupSchema","Yup","shape","name","min","max","trim","required","number","dispatch","useDispatch","_jsxs","_Fragment","children","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","addContact","_objectSpread","resetForm","type","pattern","title","component","selectIsLoading","state","contacts","isLoading","selectError","error","selectVisibleContacts","createSelector","items","filter","contact","toLowerCase","includes","List","WrapItem","Text","Btn","WrappText","IconClose","GrClose","TotalText","_templateObject7","TitleList","_templateObject8","_templateObject9","FormInput","_templateObject10","_templateObject11","ChangeBtn","_templateObject12","ErrorTitle","_useState","useState","_useState2","_slicedToArray","changes","setChanges","useSelector","Error","length","map","_ref","id","onClick","MdDriveFileRenameOutline","deleteContact","e","preventDefault","updateContact","contactId","currentTarget","elements","value","handleChanges","FormLabel","defaultValue","FilterWrapper","InputFilter","TextFilter","TitleFilter","onChange","evt","setContactFilter","target","WrapperLoader","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","loading","useEffect","fetchContacts","Container","ContactForm","Filter","Loader","ContactList"],"sourceRoot":""}